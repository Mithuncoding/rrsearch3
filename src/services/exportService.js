import jsPDF from 'jspdf';
import PptxGenJS from 'pptxgenjs';
import { downloadFile } from '../utils/helpers';

/**
 * Export analysis as PDF
 */
export function exportAsPDF(analysis) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const maxWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  // Helper to add text with page breaks
  const addText = (text, fontSize = 12, style = 'normal', color = [0, 0, 0]) => {
    doc.setFontSize(fontSize);
    doc.setFont('helvetica', style);
    doc.setTextColor(...color);
    
    const lines = doc.splitTextToSize(text, maxWidth);
    lines.forEach(line => {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
      doc.text(line, margin, yPosition);
      yPosition += fontSize * 0.5;
    });
    yPosition += 5;
  };

  // Title
  addText(analysis.title, 18, 'bold', [14, 165, 233]);
  yPosition += 5;

  // Metadata
  if (analysis.authors && analysis.authors.length > 0) {
    addText(`Authors: ${analysis.authors.join(', ')}`, 10, 'italic');
  }
  if (analysis.publicationYear) {
    addText(`Year: ${analysis.publicationYear}`, 10, 'italic');
  }
  yPosition += 10;

  // Key Takeaways
  addText('KEY TAKEAWAYS', 14, 'bold', [139, 92, 246]);
  analysis.takeaways.forEach((takeaway, i) => {
    addText(`${i + 1}. ${takeaway}`, 11);
  });
  yPosition += 10;

  // Summary
  addText('SUMMARY', 14, 'bold', [139, 92, 246]);
  addText(analysis.summary, 11);
  yPosition += 10;

  // Problem Statement
  addText('PROBLEM STATEMENT', 14, 'bold', [139, 92, 246]);
  addText(analysis.problemStatement, 11);
  yPosition += 10;

  // Methodology
  addText('METHODOLOGY', 14, 'bold', [139, 92, 246]);
  addText(analysis.methodology, 11);
  yPosition += 10;

  // Key Findings
  addText('KEY FINDINGS', 14, 'bold', [139, 92, 246]);
  analysis.keyFindings.forEach((finding, i) => {
    addText(`Finding ${i + 1}: ${finding.finding}`, 11, 'bold');
    addText(`Evidence: "${finding.evidence}"`, 10, 'italic', [100, 100, 100]);
    yPosition += 5;
  });

  // Strengths (if available)
  if (analysis.strengths) {
    yPosition += 10;
    addText('STRENGTHS', 14, 'bold', [139, 92, 246]);
    analysis.strengths.forEach((strength, i) => {
      addText(`${i + 1}. ${strength.point}`, 11);
    });
  }

  // Weaknesses (if available)
  if (analysis.weaknesses) {
    yPosition += 10;
    addText('WEAKNESSES', 14, 'bold', [139, 92, 246]);
    analysis.weaknesses.forEach((weakness, i) => {
      addText(`${i + 1}. ${weakness.point}`, 11);
    });
  }

  // Hypotheses (if available)
  if (analysis.hypotheses) {
    yPosition += 10;
    addText('AI-GENERATED HYPOTHESES', 14, 'bold', [139, 92, 246]);
    analysis.hypotheses.forEach((hyp, i) => {
      addText(`Hypothesis ${i + 1}: ${hyp.hypothesis}`, 11, 'bold');
      addText(`Experimental Design: ${hyp.experimentalDesign}`, 10);
      yPosition += 5;
    });
  }

  // Footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text('Generated by Prism - The Ultimate AI Research Assistant', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save
  doc.save(`${analysis.title.substring(0, 50)}_analysis.pdf`);
}

/**
 * Export analysis as Markdown
 */
export function exportAsMarkdown(analysis) {
  let markdown = `# ${analysis.title}\n\n`;

  if (analysis.authors && analysis.authors.length > 0) {
    markdown += `**Authors:** ${analysis.authors.join(', ')}\n\n`;
  }
  if (analysis.publicationYear) {
    markdown += `**Year:** ${analysis.publicationYear}\n\n`;
  }

  markdown += `---\n\n`;

  markdown += `## Key Takeaways\n\n`;
  analysis.takeaways.forEach((takeaway, i) => {
    markdown += `${i + 1}. ${takeaway}\n`;
  });
  markdown += `\n`;

  markdown += `## Summary\n\n${analysis.summary}\n\n`;

  markdown += `## Problem Statement\n\n${analysis.problemStatement}\n\n`;

  markdown += `## Methodology\n\n${analysis.methodology}\n\n`;

  markdown += `## Key Findings\n\n`;
  analysis.keyFindings.forEach((finding, i) => {
    markdown += `### Finding ${i + 1}\n\n`;
    markdown += `${finding.finding}\n\n`;
    markdown += `> **Evidence:** "${finding.evidence}"\n\n`;
  });

  if (analysis.strengths) {
    markdown += `## Strengths\n\n`;
    analysis.strengths.forEach((strength, i) => {
      markdown += `${i + 1}. ${strength.point}\n`;
    });
    markdown += `\n`;
  }

  if (analysis.weaknesses) {
    markdown += `## Weaknesses\n\n`;
    analysis.weaknesses.forEach((weakness, i) => {
      markdown += `${i + 1}. ${weakness.point}\n`;
    });
    markdown += `\n`;
  }

  if (analysis.hypotheses) {
    markdown += `## AI-Generated Hypotheses\n\n`;
    analysis.hypotheses.forEach((hyp, i) => {
      markdown += `### Hypothesis ${i + 1}\n\n`;
      markdown += `**Statement:** ${hyp.hypothesis}\n\n`;
      markdown += `**Experimental Design:** ${hyp.experimentalDesign}\n\n`;
      if (hyp.expectedOutcome) {
        markdown += `**Expected Outcome:** ${hyp.expectedOutcome}\n\n`;
      }
    });
  }

  markdown += `---\n\n*Generated by Prism - The Ultimate AI Research Assistant*\n`;

  downloadFile(markdown, `${analysis.title.substring(0, 50)}_analysis.md`, 'text/markdown');
}

/**
 * Export presentation as PPTX
 */
export function exportAsPPTX(presentation, paperTitle) {
  const pptx = new PptxGenJS();

  // Set presentation properties
  pptx.author = 'Prism AI';
  pptx.title = paperTitle;
  pptx.subject = 'Research Paper Analysis';

  // Define theme colors
  const colors = {
    primary: '0ea5e9',
    secondary: '8b5cf6',
    accent: 'ec4899',
    text: '1e293b',
    lightBg: 'f8fafc'
  };

  // Create slides
  presentation.slides.forEach((slideData, index) => {
    const slide = pptx.addSlide();

    // Add gradient background
    if (index === 0) {
      // Title slide
      slide.background = { fill: colors.primary };
      
      slide.addText(slideData.title, {
        x: 0.5,
        y: 2.0,
        w: '90%',
        h: 1.5,
        fontSize: 44,
        bold: true,
        color: 'FFFFFF',
        align: 'center',
        valign: 'middle'
      });

      slide.addText('Generated by Prism AI', {
        x: 0.5,
        y: 4.5,
        w: '90%',
        fontSize: 18,
        color: 'FFFFFF',
        align: 'center',
        italic: true
      });
    } else {
      // Content slides
      slide.background = { fill: 'FFFFFF' };

      // Title
      slide.addText(slideData.title, {
        x: 0.5,
        y: 0.5,
        w: '90%',
        h: 0.8,
        fontSize: 32,
        bold: true,
        color: colors.primary,
        align: 'left'
      });

      // Decorative line
      slide.addShape(pptx.ShapeType.rect, {
        x: 0.5,
        y: 1.4,
        w: 9.0,
        h: 0.05,
        fill: { color: colors.secondary }
      });

      // Content bullets
      const bulletText = slideData.content.map(item => ({ text: item, options: { bullet: true, fontSize: 18, color: colors.text } }));
      
      slide.addText(bulletText, {
        x: 0.7,
        y: 1.8,
        w: 8.6,
        h: 3.5,
        fontSize: 18,
        color: colors.text,
        bullet: { type: 'number' },
        lineSpacing: 30
      });

      // Footer
      slide.addText(`Slide ${index}`, {
        x: 8.5,
        y: 5.2,
        w: 1.0,
        fontSize: 12,
        color: '94a3b8',
        align: 'right'
      });
    }
  });

  // Save presentation
  pptx.writeFile({ fileName: `${paperTitle.substring(0, 50)}_presentation.pptx` });
}

/**
 * Export multi-paper synthesis
 */
export function exportSynthesisAsPDF(synthesis, paperTitles) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const maxWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  const addText = (text, fontSize = 12, style = 'normal', color = [0, 0, 0]) => {
    doc.setFontSize(fontSize);
    doc.setFont('helvetica', style);
    doc.setTextColor(...color);
    
    const lines = doc.splitTextToSize(text, maxWidth);
    lines.forEach(line => {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
      doc.text(line, margin, yPosition);
      yPosition += fontSize * 0.5;
    });
    yPosition += 5;
  };

  // Title
  addText('MULTI-PAPER SYNTHESIS', 18, 'bold', [14, 165, 233]);
  yPosition += 10;

  // Papers analyzed
  addText('PAPERS ANALYZED', 14, 'bold', [139, 92, 246]);
  paperTitles.forEach((title, i) => {
    addText(`${i + 1}. ${title}`, 10);
  });
  yPosition += 10;

  // Overall synthesis
  addText('OVERALL SYNTHESIS', 14, 'bold', [139, 92, 246]);
  addText(synthesis.overallSynthesis, 11);
  yPosition += 10;

  // Common themes
  addText('COMMON THEMES', 14, 'bold', [139, 92, 246]);
  synthesis.commonThemes.forEach((theme, i) => {
    addText(`Theme ${i + 1}: ${theme.theme}`, 11, 'bold');
    addText(`Discussed in: ${theme.papersDiscussing.join(', ')}`, 10, 'italic');
    yPosition += 5;
  });
  yPosition += 10;

  // Conflicting findings
  addText('CONFLICTING FINDINGS', 14, 'bold', [139, 92, 246]);
  synthesis.conflictingFindings.forEach((conflict, i) => {
    addText(`${i + 1}. ${conflict.topic}`, 11, 'bold');
    addText(conflict.conflicts, 10);
    yPosition += 5;
  });
  yPosition += 10;

  // Concept evolution
  addText('CONCEPT EVOLUTION', 14, 'bold', [139, 92, 246]);
  addText(synthesis.conceptEvolution, 11);

  doc.save('multi_paper_synthesis.pdf');
}
